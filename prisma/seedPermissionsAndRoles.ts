/// <reference types="node" />
import { PrismaClient } from '../generated/prisma'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding permissions and roles...')

  // 1. Seed Permissions
  const permissions = [
    // Vehicle Type permissions
    {
      key: 'vehicle_type.view',
      name: 'Xem lo·∫°i ph∆∞∆°ng ti·ªán',
      description: 'C√≥ th·ªÉ xem danh s√°ch v√† chi ti·∫øt lo·∫°i ph∆∞∆°ng ti·ªán'
    },
    { key: 'vehicle_type.create', name: 'T·∫°o lo·∫°i ph∆∞∆°ng ti·ªán', description: 'C√≥ th·ªÉ t·∫°o m·ªõi lo·∫°i ph∆∞∆°ng ti·ªán' },
    {
      key: 'vehicle_type.update',
      name: 'C·∫≠p nh·∫≠t lo·∫°i ph∆∞∆°ng ti·ªán',
      description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin lo·∫°i ph∆∞∆°ng ti·ªán'
    },
    { key: 'vehicle_type.delete', name: 'X√≥a lo·∫°i ph∆∞∆°ng ti·ªán', description: 'C√≥ th·ªÉ x√≥a lo·∫°i ph∆∞∆°ng ti·ªán' },

    // Menu permissions
    { key: 'menu.view', name: 'Xem menu', description: 'C√≥ th·ªÉ xem danh s√°ch menu v√† menu items' },
    { key: 'menu.create', name: 'T·∫°o menu', description: 'C√≥ th·ªÉ t·∫°o m·ªõi menu categories v√† menu items' },
    { key: 'menu.update', name: 'C·∫≠p nh·∫≠t menu', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a menu categories v√† menu items' },
    { key: 'menu.delete', name: 'X√≥a menu', description: 'C√≥ th·ªÉ x√≥a menu categories v√† menu items' },

    // Post Category permissions
    { key: 'post_category.view', name: 'Xem danh m·ª•c b√†i vi·∫øt', description: 'C√≥ th·ªÉ xem danh s√°ch danh m·ª•c b√†i vi·∫øt' },
    { key: 'post_category.create', name: 'T·∫°o danh m·ª•c b√†i vi·∫øt', description: 'C√≥ th·ªÉ t·∫°o m·ªõi danh m·ª•c b√†i vi·∫øt' },
    { key: 'post_category.edit', name: 'S·ª≠a danh m·ª•c b√†i vi·∫øt', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a danh m·ª•c b√†i vi·∫øt' },
    { key: 'post_category.delete', name: 'X√≥a danh m·ª•c b√†i vi·∫øt', description: 'C√≥ th·ªÉ x√≥a danh m·ª•c b√†i vi·∫øt' },

    // Contact permissions
    { key: 'contact.view', name: 'Xem li√™n h·ªá', description: 'C√≥ th·ªÉ xem danh s√°ch v√† chi ti·∫øt li√™n h·ªá t·ª´ kh√°ch h√†ng' },

    // User management permissions
    { key: 'user.view', name: 'Xem ng∆∞·ªùi d√πng', description: 'C√≥ th·ªÉ xem danh s√°ch v√† th√¥ng tin ng∆∞·ªùi d√πng' },
    { key: 'user.create', name: 'T·∫°o ng∆∞·ªùi d√πng', description: 'C√≥ th·ªÉ t·∫°o m·ªõi t√†i kho·∫£n ng∆∞·ªùi d√πng' },
    { key: 'user.edit', name: 'S·ª≠a ng∆∞·ªùi d√πng', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng' },
    { key: 'user.delete', name: 'X√≥a ng∆∞·ªùi d√πng', description: 'C√≥ th·ªÉ x√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' },

    // Role management permissions
    { key: 'role.view', name: 'Xem vai tr√≤', description: 'C√≥ th·ªÉ xem danh s√°ch vai tr√≤ v√† ph√¢n quy·ªÅn' },
    { key: 'role.create', name: 'T·∫°o vai tr√≤', description: 'C√≥ th·ªÉ t·∫°o m·ªõi vai tr√≤' },
    { key: 'role.edit', name: 'S·ª≠a vai tr√≤', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a vai tr√≤ v√† ph√¢n quy·ªÅn' },
    { key: 'role.delete', name: 'X√≥a vai tr√≤', description: 'C√≥ th·ªÉ x√≥a vai tr√≤' },

    // Permission management permissions
    { key: 'permission.view', name: 'Xem quy·ªÅn h·∫°n', description: 'C√≥ th·ªÉ xem danh s√°ch quy·ªÅn h·∫°n' },
    { key: 'permission.manage', name: 'Qu·∫£n l√Ω quy·ªÅn h·∫°n', description: 'C√≥ th·ªÉ g√°n/thu h·ªìi quy·ªÅn h·∫°n cho ng∆∞·ªùi d√πng' },

    // Post permissions
    { key: 'post.view', name: 'Xem b√†i vi·∫øt', description: 'C√≥ th·ªÉ xem danh s√°ch v√† chi ti·∫øt b√†i vi·∫øt' },
    { key: 'post.create', name: 'T·∫°o b√†i vi·∫øt', description: 'C√≥ th·ªÉ t·∫°o m·ªõi b√†i vi·∫øt' },
    { key: 'post.edit', name: 'S·ª≠a b√†i vi·∫øt', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a b√†i vi·∫øt' },
    { key: 'post.delete', name: 'X√≥a b√†i vi·∫øt', description: 'C√≥ th·ªÉ x√≥a b√†i vi·∫øt' },
    { key: 'post.publish', name: 'Xu·∫•t b·∫£n b√†i vi·∫øt', description: 'C√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i xu·∫•t b·∫£n b√†i vi·∫øt' },

    // Product permissions
    { key: 'product.view', name: 'Xem s·∫£n ph·∫©m', description: 'C√≥ th·ªÉ xem danh s√°ch v√† chi ti·∫øt s·∫£n ph·∫©m' },
    { key: 'product.create', name: 'T·∫°o s·∫£n ph·∫©m', description: 'C√≥ th·ªÉ t·∫°o m·ªõi s·∫£n ph·∫©m' },
    { key: 'product.edit', name: 'S·ª≠a s·∫£n ph·∫©m', description: 'C√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin s·∫£n ph·∫©m' },
    { key: 'product.delete', name: 'X√≥a s·∫£n ph·∫©m', description: 'C√≥ th·ªÉ x√≥a s·∫£n ph·∫©m' },

    // System permissions
    { key: 'system.admin', name: 'Qu·∫£n tr·ªã h·ªá th·ªëng', description: 'To√†n quy·ªÅn qu·∫£n tr·ªã h·ªá th·ªëng' },
    { key: 'system.backup', name: 'Sao l∆∞u h·ªá th·ªëng', description: 'C√≥ th·ªÉ th·ª±c hi·ªán sao l∆∞u v√† kh√¥i ph·ª•c d·ªØ li·ªáu' },
    { key: 'system.logs', name: 'Xem logs h·ªá th·ªëng', description: 'C√≥ th·ªÉ xem v√† ph√¢n t√≠ch logs h·ªá th·ªëng' },

    // Report permissions
    { key: 'report.view', name: 'Xem b√°o c√°o', description: 'C√≥ th·ªÉ xem c√°c b√°o c√°o th·ªëng k√™' },
    { key: 'report.export', name: 'Xu·∫•t b√°o c√°o', description: 'C√≥ th·ªÉ xu·∫•t b√°o c√°o ra file Excel/PDF' }
  ]

  console.log('üìù Creating permissions...')
  for (const permission of permissions) {
    await prisma.permission.upsert({
      where: { key: permission.key },
      update: {
        name: permission.name,
        description: permission.description
      },
      create: permission
    })
  }
  console.log(`‚úÖ Created ${permissions.length} permissions`)

  // 2. Seed Roles (t·ª´ database hi·ªán c√≥)
  const roles = [
    {
      key: 'admin',
      name: 'Administrator',
      description: 'Administrative access to most system features'
    },
    {
      key: 'user',
      name: 'User',
      description: 'Basic user with viewing permissions'
    },
    {
      key: 'editor',
      name: 'Editor',
      description: 'Content management and moderation'
    },
    {
      key: 'super_admin',
      name: 'Super Admin',
      description: 'Full system access with all permissions'
    },
    {
      key: 'author',
      name: 'Author',
      description: 'Content creation and basic editing'
    },
    {
      key: 'manager',
      name: 'Manager',
      description: 'Manager level access with department permissions'
    }
  ]

  console.log('üë• Creating roles...')
  for (const role of roles) {
    await prisma.userRole.upsert({
      where: { key: role.key },
      update: {
        name: role.name,
        description: role.description
      },
      create: role
    })
  }
  console.log(`‚úÖ Created ${roles.length} roles`)

  // 3. Assign Permissions to Roles
  console.log('üîó Assigning permissions to roles...')

  // Super Admin - T·∫•t c·∫£ quy·ªÅn
  const superAdminRole = await prisma.userRole.findUnique({ where: { key: 'super_admin' } })
  const allPermissions = await prisma.permission.findMany()

  if (superAdminRole) {
    for (const permission of allPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: superAdminRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: superAdminRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned all permissions to Super Admin`)
  }

  // Admin - H·∫ßu h·∫øt quy·ªÅn tr·ª´ system.admin
  const adminRole = await prisma.userRole.findUnique({ where: { key: 'admin' } })
  const adminPermissionKeys = [
    'vehicle_type.view',
    'vehicle_type.create',
    'vehicle_type.update',
    'vehicle_type.delete',
    'menu.view',
    'menu.create',
    'menu.update',
    'menu.delete',
    'post_category.view',
    'post_category.create',
    'post_category.edit',
    'post_category.delete',
    'contact.view',
    'user.view',
    'user.create',
    'user.edit',
    'user.delete',
    'role.view',
    'role.create',
    'role.edit',
    'role.delete',
    'permission.view',
    'permission.manage',
    'post.view',
    'post.create',
    'post.edit',
    'post.delete',
    'post.publish',
    'product.view',
    'product.create',
    'product.edit',
    'product.delete',
    'system.backup',
    'system.logs',
    'report.view',
    'report.export'
  ]

  if (adminRole) {
    const adminPermissions = await prisma.permission.findMany({
      where: { key: { in: adminPermissionKeys } }
    })

    for (const permission of adminPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: adminRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: adminRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${adminPermissions.length} permissions to Admin`)
  }

  // Content Manager - Qu·∫£n l√Ω n·ªôi dung
  const contentManagerRole = await prisma.userRole.findUnique({ where: { key: 'content_manager' } })
  const contentManagerPermissionKeys = [
    'post_category.view',
    'post_category.create',
    'post_category.edit',
    'post.view',
    'post.create',
    'post.edit',
    'post.delete',
    'post.publish',
    'product.view',
    'product.create',
    'product.edit',
    'product.delete',
    'menu.view',
    'menu.update',
    'report.view'
  ]

  if (contentManagerRole) {
    const contentManagerPermissions = await prisma.permission.findMany({
      where: { key: { in: contentManagerPermissionKeys } }
    })

    for (const permission of contentManagerPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: contentManagerRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: contentManagerRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${contentManagerPermissions.length} permissions to Content Manager`)
  }

  // Editor - Ch·ªânh s·ª≠a n·ªôi dung
  const editorRole = await prisma.userRole.findUnique({ where: { key: 'editor' } })
  const editorPermissionKeys = [
    'post.view',
    'post.create',
    'post.edit',
    'product.view',
    'product.create',
    'product.edit',
    'post_category.view',
    'menu.view'
  ]

  if (editorRole) {
    const editorPermissions = await prisma.permission.findMany({
      where: { key: { in: editorPermissionKeys } }
    })

    for (const permission of editorPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: editorRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: editorRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${editorPermissions.length} permissions to Editor`)
  }

  // Viewer - Ch·ªâ xem
  const viewerRole = await prisma.userRole.findUnique({ where: { key: 'viewer' } })
  const viewerPermissionKeys = ['post.view', 'product.view', 'post_category.view', 'menu.view', 'report.view']

  if (viewerRole) {
    const viewerPermissions = await prisma.permission.findMany({
      where: { key: { in: viewerPermissionKeys } }
    })

    for (const permission of viewerPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: viewerRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: viewerRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${viewerPermissions.length} permissions to Viewer`)
  }

  // Customer Service - ChƒÉm s√≥c kh√°ch h√†ng
  const customerServiceRole = await prisma.userRole.findUnique({ where: { key: 'customer_service' } })
  const customerServicePermissionKeys = ['contact.view', 'user.view', 'post.view', 'product.view', 'report.view']

  if (customerServiceRole) {
    const customerServicePermissions = await prisma.permission.findMany({
      where: { key: { in: customerServicePermissionKeys } }
    })

    for (const permission of customerServicePermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: customerServiceRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: customerServiceRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${customerServicePermissions.length} permissions to Customer Service`)
  }

  // Manager - Manager level access
  const managerRole = await prisma.userRole.findUnique({ where: { key: 'manager' } })
  const managerPermissionKeys = [
    'vehicle_type.view',
    'vehicle_type.create',
    'vehicle_type.update',
    'menu.view',
    'menu.update',
    'post_category.view',
    'post_category.create',
    'post_category.edit',
    'contact.view',
    'user.view',
    'post.view',
    'post.create',
    'post.edit',
    'post.publish',
    'product.view',
    'product.create',
    'product.edit',
    'report.view',
    'report.export'
  ]

  if (managerRole) {
    const managerPermissions = await prisma.permission.findMany({
      where: { key: { in: managerPermissionKeys } }
    })

    for (const permission of managerPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: managerRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: managerRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${managerPermissions.length} permissions to Manager`)
  }

  // Author - Content creation and basic editing
  const authorRole = await prisma.userRole.findUnique({ where: { key: 'author' } })
  const authorPermissionKeys = [
    'post.view',
    'post.create',
    'post.edit',
    'product.view',
    'product.create',
    'product.edit',
    'post_category.view',
    'menu.view'
  ]

  if (authorRole) {
    const authorPermissions = await prisma.permission.findMany({
      where: { key: { in: authorPermissionKeys } }
    })

    for (const permission of authorPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: authorRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: authorRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${authorPermissions.length} permissions to Author`)
  }

  // User - Basic user with viewing permissions
  const userRole = await prisma.userRole.findUnique({ where: { key: 'user' } })
  const userPermissionKeys = ['post.view', 'product.view', 'post_category.view', 'menu.view']

  if (userRole) {
    const userPermissions = await prisma.permission.findMany({
      where: { key: { in: userPermissionKeys } }
    })

    for (const permission of userPermissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: userRole.id,
            permissionId: permission.id
          }
        },
        update: {},
        create: {
          roleId: userRole.id,
          permissionId: permission.id
        }
      })
    }
    console.log(`‚úÖ Assigned ${userPermissions.length} permissions to User`)
  }

  console.log('üéâ Permissions and roles seeding completed!')
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding permissions and roles:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
