generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  supabaseId            String?              @unique @db.Uuid
  email                 String               @unique
  name                  String?
  avatarUrl             String?
  active                Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  addresses             String?
  phoneNumber           String?
  createdMenuCategories MenuCategory[]       @relation("MenuCategoryCreatedBy")
  updatedMenuCategories MenuCategory[]       @relation("MenuCategoryUpdatedBy")
  createdMenuItems      MenuItem[]           @relation("MenuItemCreatedBy")
  updatedMenuItems      MenuItem[]           @relation("MenuItemUpdatedBy")
  createdCategories     PostCategory[]       @relation("CategoryCreatedBy")
  updatedCategories     PostCategory[]       @relation("CategoryUpdatedBy")
  createdPostComments   PostComment[]        @relation("PostCommentCreatedBy")
  updatedPostComments   PostComment[]        @relation("PostCommentUpdatedBy")
  userComments          PostComment[]        @relation("UserComments")
  createdPosts          Post[]               @relation("PostCreatedBy")
  updatedPosts          Post[]               @relation("PostUpdatedBy")
  createdReviews        ProductReview[]      @relation("ProductReviewCreatedBy")
  updatedReviews        ProductReview[]      @relation("ProductReviewUpdatedBy")
  createdProducts       Product[]            @relation("ProductCreatedBy")
  updatedProducts       Product[]            @relation("ProductUpdatedBy")
  createdSeoMeta        SeoMeta[]            @relation("SeoCreatedBy")
  updatedSeoMeta        SeoMeta[]            @relation("SeoUpdatedBy")
  userPermissions       UserPermission[]
  roleAssignments       UserRoleAssignment[]
  createdVehicleTypes   VehicleType[]        @relation("VehicleTypeCreatedBy")
  updatedVehicleTypes   VehicleType[]        @relation("VehicleTypeUpdatedBy")

  @@map("users")
}

model UserRole {
  id              Int                  @id @default(autoincrement())
  key             String               @unique
  name            String
  description     String?
  rolePermissions RolePermission[]
  assignments     UserRoleAssignment[]

  @@map("user_roles")
}

model UserRoleAssignment {
  id     Int      @id @default(autoincrement())
  userId Int
  roleId Int
  scope  String?
  role   UserRole @relation(fields: [roleId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId, scope])
  @@map("user_role_assignments")
}

model Permission {
  id              Int              @id @default(autoincrement())
  key             String           @unique
  name            String
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         UserRole   @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  allowed      Boolean    @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model PostCategory {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?
  parentId    Int?
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   Int
  updatedBy   Int
  order       Int               @default(0)
  creator     User              @relation("CategoryCreatedBy", fields: [createdBy], references: [id])
  parent      PostCategory?     @relation("CategoryParent", fields: [parentId], references: [id])
  children    PostCategory[]    @relation("CategoryParent")
  updater     User              @relation("CategoryUpdatedBy", fields: [updatedBy], references: [id])
  postTags    PostCategoryTag[]
  posts       Post[]            @relation("PostPrimaryCategory")

  @@map("post_categories")
}

model Post {
  id                 Int               @id @default(autoincrement())
  title              String
  slug               String            @unique
  excerpt            String?
  content            String
  featuredImage      String?
  status             PostStatus        @default(DRAFT)
  albumImages        Json?
  videoUrl           String?
  note               String?
  priority           Int               @default(0)
  isHighlighted      Boolean           @default(false)
  isFeatured         Boolean           @default(false)
  scheduledAt        DateTime?
  expiredAt          DateTime?
  targetAudience     Json?
  publishedAt        DateTime?
  categoryId         Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          Int
  updatedBy          Int
  postType           PostType          @default(ARTICLE)
  metaKeywords       Json?
  shortContent       String?
  taggedCategoryTags PostCategoryTag[]
  comments           PostComment[]     @relation("PostComments")
  postProductLinks   PostProduct[]
  category           PostCategory?     @relation("PostPrimaryCategory", fields: [categoryId], references: [id])
  creator            User              @relation("PostCreatedBy", fields: [createdBy], references: [id])
  updater            User              @relation("PostUpdatedBy", fields: [updatedBy], references: [id])

  @@map("posts")
}

model PostCategoryTag {
  id         Int          @id @default(autoincrement())
  postId     Int
  categoryId Int
  createdAt  DateTime     @default(now())
  createdBy  Int?
  category   PostCategory @relation(fields: [categoryId], references: [id])
  post       Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("post_category_tags")
}

model PostProduct {
  id        Int      @id @default(autoincrement())
  postId    Int
  productId Int
  createdAt DateTime @default(now())
  createdBy Int?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([postId, productId])
  @@map("post_products")
}

model SeoMeta {
  id              Int         @id @default(autoincrement())
  seoableType     SeoableType
  seoableId       Int
  seoTitle        String?     @db.VarChar(120)
  metaDescription String?     @db.VarChar(255)
  canonicalUrl    String?     @unique
  focusKeyword    String?     @db.VarChar(100)
  ogType          String?     @default("article") @db.VarChar(20)
  noindex         Boolean     @default(false)
  nofollow        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       Int
  updatedBy       Int
  creator         User        @relation("SeoCreatedBy", fields: [createdBy], references: [id])
  updater         User        @relation("SeoUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([seoableType, seoableId])
  @@index([seoableType, seoableId])
  @@map("seo_meta")
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int?
  email     String?
  name      String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int
  creator   User     @relation("PostCommentCreatedBy", fields: [createdBy], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  updater   User     @relation("PostCommentUpdatedBy", fields: [updatedBy], references: [id])
  user      User?    @relation("UserComments", fields: [userId], references: [id])

  @@map("post_comments")
}

model Product {
  id               Int             @id @default(autoincrement())
  name             String
  description      String?
  slug             String          @unique
  price            Int
  term             String?
  targetLink       String?
  targetFile       String?
  shortContent     String?
  content          String
  details          String?
  icon             String?
  imgs             Json?
  active           Boolean         @default(true)
  tags             Json?
  isPromotion      Boolean         @default(false)
  promotionDetails String?
  metaKeywords     Json?
  note             String?
  priority         Int             @default(0)
  isHighlighted    Boolean         @default(false)
  isFeatured       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  createdBy        Int?
  updatedBy        Int?
  sku              String          @unique
  isSaleOnline     Boolean         @default(false)
  coverage         Int?
  postProductLinks PostProduct[]
  reviews          ProductReview[]
  creator          User?           @relation("ProductCreatedBy", fields: [createdBy], references: [id])
  updater          User?           @relation("ProductUpdatedBy", fields: [updatedBy], references: [id])

  @@index([active])
  @@index([isFeatured])
  @@map("products")
}

model ProductReview {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      Int?
  userName    String?
  userAvatar  String?
  rating      Int
  content     String?
  description String?
  note        String?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?
  updatedBy   Int?
  creator     User?    @relation("ProductReviewCreatedBy", fields: [createdBy], references: [id])
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  updater     User?    @relation("ProductReviewUpdatedBy", fields: [updatedBy], references: [id])

  @@map("product_reviews")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?
  message   String
  ip        String?  @db.VarChar(64)
  userAgent String?
  createdAt DateTime @default(now())
  phone     String?  @db.VarChar(20)

  @@index([email])
  @@index([ip])
  @@map("contacts")
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  key         String     @unique
  name        String
  description String?
  active      Boolean    @default(true)
  position    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   Int
  updatedBy   Int
  creator     User       @relation("MenuCategoryCreatedBy", fields: [createdBy], references: [id])
  updater     User       @relation("MenuCategoryUpdatedBy", fields: [updatedBy], references: [id])
  menus       MenuItem[] @relation("MenuCategoryItems")

  @@map("menu_categories")
}

model MenuItem {
  id         Int          @id @default(autoincrement())
  key        String
  label      String
  icon       String?
  url        String?
  routerLink String?
  command    String?
  parentId   Int?
  categoryId Int
  active     Boolean      @default(true)
  order      Int          @default(0)
  isBlank    Boolean      @default(false)
  expanded   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  createdBy  Int
  updatedBy  Int
  category   MenuCategory @relation("MenuCategoryItems", fields: [categoryId], references: [id], onDelete: Cascade)
  creator    User         @relation("MenuItemCreatedBy", fields: [createdBy], references: [id])
  parent     MenuItem?    @relation("MenuItemParent", fields: [parentId], references: [id], onDelete: Cascade)
  children   MenuItem[]   @relation("MenuItemParent")
  updater    User         @relation("MenuItemUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([categoryId, key])
  @@index([categoryId, parentId, order])
  @@index([active])
  @@map("menu_items")
}

model VehicleType {
  id              Int          @id @default(autoincrement())
  vehicleTypeCode String
  vehicleTypeName String
  /// OTOKKDVT, OTOKDVT, XEMAY, VCXOTO
  usageType       UsageType
  usagePurpose    UsagePurpose
  seatMin         Int
  seatMax         Int
  weightMin       Int
  weightMax       Int
  isShowSeat      Boolean      @default(false)
  isShowWeight    Boolean      @default(false)
  pricePerYear    Int
  active          Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       Int
  updatedBy       Int
  creator         User         @relation("VehicleTypeCreatedBy", fields: [createdBy], references: [id])
  updater         User         @relation("VehicleTypeUpdatedBy", fields: [updatedBy], references: [id])

  @@index([usageType, usagePurpose])
  @@index([active])
  @@map("vehicle_types")
}

enum PostType {
  ARTICLE
  GUIDE
  NEWS
  PRODUCT
  FAQ
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SeoableType {
  POST
  POST_CATEGORY
  PRODUCT
  PRODUCT_CATEGORY
  INSURANCE_PLAN
  REVIEW
  TESTIMONIAL
  CLAIM_GUIDE
  FAQ_ITEM
  LEGAL_PAGE
  BRANCH_OFFICE
  AGENT_PROFILE
}

enum UsageType {
  OTOKKDVT
  OTOKDVT
  XEMAY
  VCXOTO
}

enum UsagePurpose {
  XCN
  XCH
  XCN_CH
}



